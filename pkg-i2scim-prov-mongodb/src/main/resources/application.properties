#
# Copyright 2021.  Independent Identity Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
quarkus.application.name=i2scim
quarkus.kubernetes.namespace=scim-mongo
quarkus.container-image.group=independentid
quarkus.container-image.name=i2scim-mongo
quarkus.container-image.builder=docker
quarkus.container-image.tag=0.7.0-SNAPSHOT
#quarkus.container-image.registry=docker.io
quarkus.docker.build-args.platform=linux/amd64,linux/arm64
#quarkus.docker.build-args.--load=\
# Disabled because there appears to be a bug building multi-arch docker builds - do by hand
quarkus.container-image.build=false
quarkus.container-image.push=false
# Use the cluster's assigned loadbalancer
quarkus.kubernetes.service-type=LoadBalancer
quarkus.kubernetes.image-pull-secrets=regcred
quarkus.kubernetes.deploy=false
quarkus.kubernetes.replicas=2
quarkus.kubernetes.liveness-probe.initial-delay=10
quarkus.kubernetes.readiness-probe.initial-delay=5
quarkus.kubernetes.liveness-probe.period=30
quarkus.kubernetes.readiness-probe.period=30
quarkus.kubernetes.liveness-probe.timeout=10
quarkus.kubernetes.readiness-probe.timeout=10
#quarkus.kubernetes.liveness-probe.timeout
#quarkus.kubernetes.liveness-probe.success-threshold
#quarkus.kubernetes.liveness-probe.failure-threshold
quarkus.kubernetes.env.secrets=mongo-db-cred,i2scim-root
quarkus.kubernetes.env.configmaps=i2scim-mongo-config
quarkus.kubernetes.config-map-volumes.configschema.config-map-name=i2scim-config-schema
quarkus.kubernetes.config-map-volumes.configschema.default-mode=0444
quarkus.kubernetes.mounts.configschema.name=i2scim-config-schema
quarkus.kubernetes.mounts.configschema.path=/config
quarkus.kubernetes.mounts.configschema.read-only=true
# Define the SCIM mount point (where logs etc will be stored)
quarkus.kubernetes.mounts.i2scim-mongo-pvc.path=/scim
quarkus.kubernetes.mounts.i2scim-mongo-pvc.read-only=false
#quarkus.kubernetes.mounts."i2scim-pvc".sub-path=""
quarkus.kubernetes.pvc-volumes.i2scim-mongo-pvc.claim-name=i2scim-mongo-pvc
quarkus.kubernetes.pvc-volumes.i2scim-mongo-pvc.default-mode=ReadWriteOnce
#quarkus.package.type=fast-jar
#scim.hostname = ${SCIM_SERVER_HOST}
#scim.clustername = SCIM_CLUSTER_1
#scim.server.port=8080
#scim.server.host=localhost
#scim.server.path=/scim
# Bootstrap Schema definitions
scim.resourcetype.path=/config/resourceTypes.json
scim.schema.path=/config/scimSchema.json
#SCIM features
scim.json.pretty=true
scim.query.max.resultsize=1000
scim.bulk.max.ops=1000
scim.bulk.max.errors=5
scim.thread.count=5
scim.root.dir=/scim
#Console log
quarkus.log.min-level=FINE
#quarkus.log.category."com.independentid.scim".min-level=DEBUG
# HTTP Logging
quarkus.http.access-log.enabled=true
quarkus.http.access-log.log-to-file=true
quarkus.http.access-log.base-file-name=scim-access
quarkus.http.access-log.log-directory=${scim.root.dir}/logs
# Provider Config
#Provider selection e.g. one of...
#  - com.independentid.scim.backend.mongo.MongoProvider
#  - com.independentid.scim.backend.memory.MemoryProvider
scim.prov.providerClass=com.independentid.scim.backend.mongo.MongoProvider
scim.prov.persist.schema=true
#SCIM MongoProvider Config
scim.prov.mongo.uri=mongodb://localhost:27017
scim.prov.mongo.dbname=SCIM
# Ideally use a kubernetes secret to pass these values...
#scim.prov.mongo.username=admin
#scim.prov.mongo.password=changeit!
#quarkus.kubernetes.env.mapping.scim-prov-mongo-username.from-secret=mongo-db-cred
#quarkus.kubernetes.env.mapping.scim-prov-mongo-username.with-key=username
#quarkus.kubernetes.env.mapping."scim.prov.mongo.password".from-secret=mongo-db-cred
#quarkus.kubernetes.env.mapping."scim.prov.mongo.password".with-key=password
scim.prov.mongo.indexes=User:userName,User:emails.value,Group:displayName
#Quarkus Mongo Security Extensions
# Configures the authentication mechanism to use if a credential was supplied. The default is unspecified, in which
# case the client will pick the most secure mechanism available based on the sever version. For the GSSAPI and
# MONGODB-X509 mechanisms, no password is accepted, only the username.
#Auth-mechanism = MONGO_CR | GSSAPI | PLAIN | MONGODB-X509
quarkus.mongodb.credentials.auth-mechanism=PLAIN
# Configures the source of the authentication credentials. This is typically the database that the credentials have
# been created. The value defaults to the database specified in the path portion of the connection string or in the
# 'database' configuration property.. If the database is specified in neither place, the default value is admin. This
# option is only respected when using the MONGO-CR mechanism (the default).
quarkus.mongodb.credentials.auth-source=admin
# Allows passing of authentication mechanism properties
# quarkus.mongodb.credentials.auth-mechanism-properties
# Configures the source of the authentication credentials. This is typically the database that the credentials have
# been created. The value defaults to the database specified in the path portion of the connection string or in the
# 'database' configuration property.. If the database is specified in neither place, the default value is admin. This
# option is only respected when using the MONGO-CR mechanism (the default).
# quarkus.mongodb.credentials.auth-source
#SCIM Access Control
scim.security.enable=true
scim.security.acis=/config/acis.json
scim.security.root.enable=true
#quarkus.kubernetes.env.mapping."scim.security.root.username".from-secret=scim-root
#quarkus.kubernetes.env.mapping."scim.security.root.username".with-key=username
#quarkus.kubernetes.env.mapping."scim.security.root.password".from-secret=scim-root
#quarkus.kubernetes.env.mapping."scim.security.root.password".with-key=password
#scim.security.root.username=
#scim.security.root.password=
# Basic Authentication
scim.security.authen.basic=true
# Bearer Authentication
scim.security.authen.jwt=true
scim.security.authen.jwt.claim.scope=scope

#DEVOPS and Monitoring
#quarkus.smallrye-metrics.path=
#quarkus.smallrye-metrics.extensions.enabled=true
quarkus.smallrye-metrics.path=/metrics
quarkus.smallrye-metrics.jaxrs.enabled=true
# Mongo Provider config can be found in the configMap
# SCIM Event Handling and Replication (must be enabled to run kafka components)
scim.event.enable=false

