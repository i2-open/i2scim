#
# Copyright 2021.  Independent Identity Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
quarkus.index-dependency.i2scim-server.group-id=com.independentid
quarkus.index-dependency.i2scim-server.artifact-id=i2scim-server
quarkus.index-dependency.i2scim-core.group-id=com.independentid
quarkus.index-dependency.i2scim-core.artifact-id=i2scim-core
quarkus.application.name=i2scim
#quarkus.container-image.group=independentid
#quarkus.container-image.name=i2scim
#scim.hostname = ${SCIM_SERVER_HOST}
#scim.clustername = SCIM_CLUSTER_1
#scim.server.port=8080
#scim.server.host=localhost
#scim.server.path=/scim
# Bootstrap Schema definitions
scim.resourcetype.path=classpath:/schema/resourceTypes.json
scim.schema.path=classpath:/schema/scimSchema.json
scim.coreSchema.path=classpath:/schema/scimCommonSchema.json
scim.serverSchema.path=classpath:/schema/scimFixedSchema.json
#SCIM features
scim.json.pretty=true
scim.query.max.resultsize=1000
scim.bulk.max.ops=1000
scim.bulk.max.errors=5
scim.thread.count=5
scim.root.dir=/scim
#Console log
quarkus.log.min-level=FINE
#quarkus.log.category."com.independentid.scim".min-level=DEBUG
# HTTP Logging
quarkus.http.access-log.enabled=true
quarkus.http.access-log.log-to-file=true
quarkus.http.access-log.base-file-name=scim-access
quarkus.http.access-log.log-directory=${scim.root.dir}/logs
# Provider Config
#Provider selection e.g. one of...
#  - com.independentid.scim.backend.mongo.MongoProvider
#  - com.independentid.scim.backend.memory.MemoryProvider
scim.prov.providerClass=com.independentid.scim.backend.memory.MemoryProvider
scim.prov.persist.schema=true
#SCIM Memory Provider Config
scim.prov.memory.dir=${scim.root.dir}/scimdata
scim.prov.memory.file=scimdb.json
scim.prov.memory.maxbackups=10
scim.prov.memory.backup.mins=60
scim.prov.memory.indexes=User:userName,User:emails.value,Group:displayName
# WARNING, when enabled, test causes a database reset
#SCIM MongoProvider Config
scim.prov.mongo.uri=mongodb://localhost:27017
scim.prov.mongo.dbname=SCIM
scim.prov.mongo.indexes=User:userName,User:emails.value,Group:displayName
# WARNING, when enabled, test causes a database reset
#SCIM Access Control
scim.security.enable=true
scim.security.acis=/schema/acis.json
scim.security.root.enable=true
scim.security.root.username=admin
scim.security.root.password=admin
# Basic Authentication
scim.security.authen.basic=true
# Bearer Authentication
scim.security.authen.jwt=true
scim.security.authen.jwt.claim.scope=scope
quarkus.smallrye-jwt.enabled=true
# For more information, see: https://quarkus.io/guides/security-jwt
smallrye.jwt.always-check-authorization=true
mp.jwt.verify.issuer=test.i2scim.io
mp.jwt.verify.audiences=aud.test.i2scim.io
#mp.jwt.verify.location=https://example.com/jwkset.json
mp.jwt.verify.publickey={"keys":[{"kty":"RSA","kid":"i2scim","use":"Key used for i2scim testing purposes ONLY!","n":"taCP35lFs85YNnjpKqbCASaosD7QdZjGnDqWoZs93wbYHbqGRMEVQ4YInNd5MsZKcF3gGtHqo0DVM_CDiRIZxcZZuwZ3BBtRmBuQafytOCkNZKjfoOE6ptnHO9oTkyhKiNJIs-lKRldP-SDUHZ_Oux8dAnD-kJhjijInRJJkqsaO-gH26sv95O7k5S0Jm-ERr0Tqfostf0k_YM9elYXXzh7CQi3rGZ9h-ccckkcs8i-J4BVVsBDruO5Rxvtt5KVEUp0PuCrLLuqmCuhjL-JdE4EiuomdJDbAqmmQZ6Ef6g_nUH_4WcCtDtN_LerTgEzIz9D7i8NV_0Ho311R9Lt4GQ","e":"AQAB"}]}
#DEVOPS and Monitoring
#quarkus.smallrye-metrics.path=
#quarkus.smallrye-metrics.extensions.enabled=true
quarkus.smallrye-metrics.path=/metrics
quarkus.smallrye-metrics.jaxrs.enabled=true
# SCIM Event Handling and Replication (must be enabled to run kafka components)
scim.event.enable=false
# Configure KafkaLogEventHandler
scim.kafka.log.enable=true
scim.kafka.log.bootstrap=localhost:9092
# Any Apache Producer Config property may be used with the scim.kafka.log.pub prefix
scim.kafka.log.pub.client.id=localhost
scim.kafka.log.pub.topic=log
#scim.kafkaLogEventHandler.pub.acks=all
scim.kafka.log.pub.key.serializer=org.apache.kafka.common.serialization.StringSerializer
scim.kafka.log.pub.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Configure KafkaRepEventHandler
scim.kafka.rep.enable=false
# Set mode to 'replicas' where all nodes are replicas, or 'sharded' for sharded clusters
#scim.kafka.rep.mode=replicas
scim.kafka.rep.pub.topic=rep
scim.kafka.rep.client.id=<AUTO>
#used to identify events from the same i2scim cluster
#when set to <AUTO> a unique identifier is generated and persisted to disk. Only override for custom configs.
scim.kafka.rep.cluster.id=cluster-name
scim.kafka.rep.shards=1
# Replication mode indicates how replication is processed.
#  global-shard - events accepted from any cluster.id but are partitioned within a kafka group (partitioned/sharded)
#  global-replica - events accepted form any cluster.id but all clients are full replicas
#  cluster-shard - events must originate with matching cluster.id and partitioned within a kafka group
#  cluster-replica - events must originate with matching cluster.id and each node is a full replica
#  transid- all events will be processed. TransId duplicate filtering will occur (used only in TEST)
scim.kafka.rep.mode=global-replica
scim.kafka.rep.bootstrap=localhost:9092
#Used for testing and recovery purposes
scim.kafka.rep.cache.processed=100
scim.kafka.rep.cache.filtered=100
# acks confirmation level
#  all  - all confirmation when all kafka broker nodes confirm (safest)
#  1    - at least one broker node (leader) has confirmed
#  0    - don't wait for confirmation
scim.kafka.rep.pub.acks=all
scim.kafka.rep.pub.enable.idempotence=true
scim.kafka.rep.pub.key.serializer=org.apache.kafka.common.serialization.StringSerializer
scim.kafka.rep.pub.value.serializer=com.independentid.scim.events.OperationSerializer
#scim.kafka.rep.pub.partitioner.class=com.independentid.scim.events.ScimKafkaPartitioner
# Configure the Kafka Replication Event Receiver
# Any Apache Consumer Config property may be used with the scim.kafka.rep.sub prefix
#scim.kafa.rep.sub.resetdate=NONE
# Kafka group.id should only be used in partitioned clusters
#scim.kafka.rep.sub.group.id=${scim.kafka.rep.cluster.id}
scim.kafka.rep.sub.topics=rep
scim.kafka.rep.sub.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
scim.kafka.rep.sub.value.deserializer=com.independentid.scim.events.kafka.JsonKafkaDeserializer
#enable only for testing...
#%dev.scim.kafka.rep.sub.auto.offset.reset=latest
#quarkus.index-dependency.scimcore.group-id=com.independentid
#quarkus.index-dependency.scimcore.artifact-id=i2scim-core
#quarkus.index-dependency.scimserv.group-id=com.independentid
#quarkus.index-dependency.scimserv.artifact-id=i2scim-prov-server
#quarkus.index-dependency.scimmem.group-id=com.independentid
#quarkus.index-dependency.scimmem.artifact-id=i2scim-prov-memory
#quarkus.index-dependency.scimmongo.group-id=com.independentid
#quarkus.index-dependency.scimmongo.artifact-id=i2scim-prov-mongo

